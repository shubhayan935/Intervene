This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
app/
  globals.css
  layout.tsx
  page.tsx
components/
  company-logos.tsx
  features-grid.tsx
  hero-section.tsx
  mouse-effect.tsx
  pricing-table.tsx
  testimonials-section.tsx
  use-cases-section.tsx
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
.gitignore
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/globals.css">
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

.container {
  margin-left: auto;
  margin-right: auto;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}
</file>

<file path="app/layout.tsx">
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { Analytics } from "@vercel/analytics/react"

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <Analytics />
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}
</file>

<file path="app/page.tsx">
import Link from 'next/link';
import { MousePointer2 } from 'lucide-react';
import HeroSection from '@/components/hero-section';
import FeaturesGrid from '@/components/features-grid';
import TestimonialsSection from '@/components/testimonials-section';
import PricingTable from '@/components/pricing-table';
import MouseEffect from '@/components/mouse-effect';
import CompanyLogos from '@/components/company-logos';
import UseCasesSection from '@/components/use-cases-section';

export default function LandingPage() {
  return (
    <div className="flex min-h-screen flex-col bg-black text-white">
      <header className="sticky top-0 z-50 w-full border-b border-white/10 bg-black/80 backdrop-blur-md">
        <div className="container flex h-16 items-center justify-between px-4 md:px-6">
          <Link href="/" className="flex items-center gap-2 font-bold text-xl">
            <MousePointer2 className="h-6 w-6 text-purple-500" />
            <span>INTERVENE</span>
          </Link>
          <nav className="hidden md:flex gap-6">
            <Link
              href="#features"
              className="text-sm font-medium text-white/70 transition-colors hover:text-white"
            >
              Features
            </Link>
            <Link
              href="#use-cases"
              className="text-sm font-medium text-white/70 transition-colors hover:text-white"
            >
              Use Cases
            </Link>
          </nav>
          <div className="flex items-center gap-4">
            <Link
              href="#download"
              className="inline-flex h-10 items-center justify-center rounded-md bg-gradient-to-r from-purple-600 to-violet-500 px-6 text-sm font-medium text-white shadow transition-colors hover:bg-gradient-to-r hover:from-purple-700 hover:to-violet-600 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-purple-500"
            >
              Get Started
            </Link>
          </div>
        </div>
      </header>
      <main className="flex-1">
        <HeroSection />
        <FeaturesGrid />
        <UseCasesSection />
      </main>
      <footer className="border-t border-white/10 bg-black py-6 md:py-12">
        <div className="container px-4 md:px-6">
          <div className="grid gap-8 md:grid-cols-2 lg:grid-cols-4">
            <div className="space-y-4">
              <Link
                href="/"
                className="flex items-center gap-2 font-bold text-xl"
              >
                <MousePointer2 className="h-6 w-6 text-purple-500" />
                <span>INTERVENE</span>
              </Link>
              <p className="text-sm text-white/70">
                Autopilot for desktops. Built entirely on-device using
                Meta&apos;s Llama Stack for fast, private, agentic task
                execution.
              </p>
            </div>
            <div className="space-y-4">
              <h3 className="text-lg font-medium">Product</h3>
              <ul className="space-y-2 text-sm text-white/70">
                <li>
                  <Link href="#" className="hover:text-white">
                    Features
                  </Link>
                </li>
                <li>
                  <Link href="#" className="hover:text-white">
                    How It Works
                  </Link>
                </li>
                <li>
                  <Link href="#" className="hover:text-white">
                    Security
                  </Link>
                </li>
                <li>
                  <Link href="#" className="hover:text-white">
                    Roadmap
                  </Link>
                </li>
              </ul>
            </div>
            <div className="space-y-4">
              <h3 className="text-lg font-medium">Resources</h3>
              <ul className="space-y-2 text-sm text-white/70">
                <li>
                  <Link href="#" className="hover:text-white">
                    Documentation
                  </Link>
                </li>
                <li>
                  <Link href="#" className="hover:text-white">
                    Guides
                  </Link>
                </li>
                <li>
                  <Link href="#" className="hover:text-white">
                    Blog
                  </Link>
                </li>
                <li>
                  <Link href="#" className="hover:text-white">
                    Support
                  </Link>
                </li>
              </ul>
            </div>
            <div className="space-y-4">
              <h3 className="text-lg font-medium">Company</h3>
              <ul className="space-y-2 text-sm text-white/70">
                <li>
                  <Link href="#" className="hover:text-white">
                    About
                  </Link>
                </li>
                <li>
                  <Link href="#" className="hover:text-white">
                    Careers
                  </Link>
                </li>
                <li>
                  <Link href="#" className="hover:text-white">
                    Privacy
                  </Link>
                </li>
                <li>
                  <Link href="#" className="hover:text-white">
                    Terms
                  </Link>
                </li>
              </ul>
            </div>
          </div>
          <div className="mt-8 border-t border-white/10 pt-8 text-center text-sm text-white/70">
            <p>Â© {new Date().getFullYear()} Intervene. All rights reserved.</p>
          </div>
        </div>
      </footer>
      <MouseEffect />
    </div>
  );
}
</file>

<file path="components/company-logos.tsx">
"use client"

import { useRef } from "react"
import Image from "next/image"
import { motion, useInView } from "framer-motion"

export default function CompanyLogos() {
  const ref = useRef<HTMLDivElement>(null)
  const isInView = useInView(ref, { once: true, amount: 0.2 })

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
      },
    },
  }

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.5,
      },
    },
  }

  return (
    <section className="relative py-12 md:py-16">
      <div className="container px-4 md:px-6">
        <div className="mx-auto max-w-3xl text-center">
          <p className="text-sm font-medium text-white/50 uppercase tracking-wider">Trusted by innovative teams at</p>
        </div>

        <div ref={ref} className="mt-8">
          <motion.div
            variants={containerVariants}
            initial="hidden"
            animate={isInView ? "visible" : "hidden"}
            className="flex flex-wrap items-center justify-center gap-8 md:gap-12 opacity-70"
          >
            {[...Array(6)].map((_, index) => (
              <motion.div key={index} variants={itemVariants} className="flex items-center justify-center">
                <Image
                  src="/placeholder-logo.svg"
                  alt={`Company logo ${index + 1}`}
                  width={120}
                  height={40}
                  className="h-8 w-auto object-contain grayscale transition-all hover:grayscale-0"
                />
              </motion.div>
            ))}
          </motion.div>
        </div>
      </div>
    </section>
  )
}
</file>

<file path="components/features-grid.tsx">
'use client';

import { useRef } from 'react';
import { motion, useInView } from 'framer-motion';
import {
  MousePointer2,
  Cpu,
  KeyRound,
  Calendar,
  ShieldCheck,
  BarChart3,
  Search,
  Lightbulb,
  Zap,
  Shield,
  Clock,
  Sparkles,
} from 'lucide-react';

const features = [
  {
    title: 'Autonomous Mode',
    description:
      'Run scripted or inferred actions like renaming files from spreadsheets or extracting info from PDFs to fill a CRM.',
    icon: MousePointer2,
    color: 'from-purple-500/20 to-violet-500/20',
    textColor: 'text-purple-400',
  },
  {
    title: 'Context-Aware Triggers',
    description:
      'Automatically triggers based on context like open tabs, folders, and file names.',
    icon: Cpu,
    color: 'from-blue-500/20 to-indigo-500/20',
    textColor: 'text-blue-400',
  },
  {
    title: 'Manual Takeover',
    description:
      'Just move the mouse or press any key â agent halts instantly. Switch back via hotkey or voice.',
    icon: KeyRound,
    color: 'from-green-500/20 to-emerald-500/20',
    textColor: 'text-green-400',
  },
  {
    title: 'Memory & Context',
    description:
      'Remembers past workflows: e.g. "every Monday, generate status report from these folders."',
    icon: Calendar,
    color: 'from-amber-500/20 to-yellow-500/20',
    textColor: 'text-amber-400',
  },
  {
    title: 'Safety & Guardrails',
    description:
      'Llama Safety API ensures no files/emails/data are sent or altered without local confirmation.',
    icon: ShieldCheck,
    color: 'from-red-500/20 to-rose-500/20',
    textColor: 'text-red-400',
  },
  {
    title: 'Efficiency Reporting',
    description:
      '"This week Copilot Mode saved you 3.2 hours on repetitive tasks."',
    icon: BarChart3,
    color: 'from-indigo-500/20 to-blue-500/20',
    textColor: 'text-indigo-400',
  },
];

// Categories like in the screenshots
const categories = [
  { name: 'Security', icon: Shield, color: 'bg-blue-900/30' },
  { name: 'Strategy', icon: Lightbulb, color: 'bg-purple-900/30' },
  { name: 'Product', icon: Zap, color: 'bg-violet-900/30' },
  { name: 'People', icon: Search, color: 'bg-teal-900/30' },
  { name: 'Design', icon: Sparkles, color: 'bg-pink-900/30' },
  { name: 'Sales', icon: Clock, color: 'bg-indigo-900/30' },
];

export default function FeaturesGrid() {
  const ref = useRef<HTMLDivElement>(null);
  const isInView = useInView(ref, { once: true, amount: 0.2 });

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
      },
    },
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.5,
      },
    },
  };

  return (
    <section id="features" className="relative py-20 md:py-32">
      <div className="absolute inset-0 bg-gradient-to-b from-black via-purple-950/10 to-black" />

      {/* Floating elements like in the screenshots */}
      <motion.div
        className="absolute top-1/4 left-1/4 h-40 w-40 rounded-full bg-gradient-to-r from-purple-600/20 to-violet-600/20 blur-3xl"
        animate={{
          x: [0, 30, 0],
          y: [0, -30, 0],
        }}
        transition={{
          duration: 8,
          repeat: Number.POSITIVE_INFINITY,
          repeatType: 'reverse',
        }}
      />

      <motion.div
        className="absolute bottom-1/3 right-1/3 h-60 w-60 rounded-full bg-gradient-to-r from-blue-600/20 to-cyan-600/20 blur-3xl"
        animate={{
          x: [0, -40, 0],
          y: [0, 40, 0],
        }}
        transition={{
          duration: 10,
          repeat: Number.POSITIVE_INFINITY,
          repeatType: 'reverse',
        }}
      />

      <div className="container relative px-4 md:px-6">
        <div className="mx-auto max-w-3xl text-center">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="inline-block rounded-full bg-gradient-to-r from-purple-600/10 to-violet-600/10 px-4 py-1.5 text-sm font-medium text-purple-300 backdrop-blur"
          >
            <span className="mr-2 inline-block h-2 w-2 animate-pulse rounded-full bg-purple-500"></span>
            OS-Level Automation
          </motion.div>

          <h2 className="mt-6 text-3xl font-bold tracking-tight sm:text-4xl md:text-5xl">
            Autopilot for your{' '}
            <span className="bg-gradient-to-r from-purple-400 to-violet-400 bg-clip-text text-transparent">
              desktop workflows
            </span>
          </h2>
          <p className="mt-4 text-lg text-white/70">
            Built entirely on-device using Meta&apos;s Llama Stack for fast,
            private, agentic task execution.
          </p>
        </div>

        {/* Categories section like in the screenshots */}
        <div className="mt-16 overflow-hidden">
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 1 }}
            className="flex flex-wrap justify-center gap-4"
          >
            {categories.map((category, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
                className={`relative flex items-center justify-center rounded-lg ${category.color} px-6 py-3 text-lg font-medium backdrop-blur-sm transition-all hover:scale-105`}
              >
                <category.icon className="mr-2 h-5 w-5" />
                {category.name}
              </motion.div>
            ))}
          </motion.div>
        </div>

        {/* Main features section */}
        <div ref={ref} className="mt-20">
          <motion.div
            variants={containerVariants}
            initial="hidden"
            animate={isInView ? 'visible' : 'hidden'}
            className="grid gap-8 md:grid-cols-2 lg:grid-cols-3"
          >
            {features.map((feature, index) => (
              <motion.div
                key={index}
                variants={itemVariants}
                className="group relative overflow-hidden rounded-xl border border-white/10 bg-black/40 p-6 backdrop-blur-sm transition-all hover:bg-white/5 hover:shadow-lg hover:shadow-purple-500/5"
              >
                {/* Gradient background */}
                <div
                  className={`absolute inset-0 bg-gradient-to-br ${feature.color} opacity-10 transition-opacity group-hover:opacity-20`}
                />

                {/* Icon with gradient background */}
                <div
                  className={`relative mb-4 inline-flex h-12 w-12 items-center justify-center rounded-lg bg-gradient-to-br ${feature.color} backdrop-blur-md`}
                >
                  <feature.icon className={`h-6 w-6 ${feature.textColor}`} />
                </div>

                <h3
                  className={`relative mb-2 text-xl font-bold ${feature.textColor}`}
                >
                  {feature.title}
                </h3>
                <p className="relative text-white/70">{feature.description}</p>

                {/* Animated border on hover */}
                <div className="absolute bottom-0 left-0 h-1 w-0 bg-gradient-to-r from-purple-500 to-violet-500 transition-all duration-300 group-hover:w-full"></div>
              </motion.div>
            ))}
          </motion.div>
        </div>
      </div>
    </section>
  );
}
</file>

<file path="components/hero-section.tsx">
"use client"

import { useRef } from "react"
import Image from "next/image"
import Link from "next/link"
import { motion, useScroll, useTransform } from "framer-motion"
import { ArrowRight, MousePointerClick } from "lucide-react"

export default function HeroSection() {
  const containerRef = useRef<HTMLDivElement>(null)
  const { scrollYProgress } = useScroll({
    target: containerRef,
    offset: ["start start", "end start"],
  })

  const opacity = useTransform(scrollYProgress, [0, 0.5], [1, 0])
  const scale = useTransform(scrollYProgress, [0, 0.5], [1, 0.9])
  const y = useTransform(scrollYProgress, [0, 0.5], [0, 100])

  return (
    <div ref={containerRef} className="relative overflow-hidden py-20 md:py-32 lg:py-40">
      {/* Background gradient */}
      <div className="absolute inset-0 bg-gradient-radial from-purple-900/20 via-black to-black" />

      {/* Animated grid lines */}
      <div className="absolute inset-0 bg-[url('/grid.svg')] bg-center [mask-image:radial-gradient(ellipse_at_center,transparent_20%,black)]" />

      {/* Floating elements */}
      <motion.div
        className="absolute top-1/4 left-1/4 h-40 w-40 rounded-full bg-gradient-to-r from-purple-600/20 to-violet-600/20 blur-3xl"
        animate={{
          x: [0, 30, 0],
          y: [0, -30, 0],
        }}
        transition={{
          duration: 8,
          repeat: Number.POSITIVE_INFINITY,
          repeatType: "reverse",
        }}
      />

      <motion.div
        className="absolute bottom-1/3 right-1/3 h-60 w-60 rounded-full bg-gradient-to-r from-blue-600/20 to-cyan-600/20 blur-3xl"
        animate={{
          x: [0, -40, 0],
          y: [0, 40, 0],
        }}
        transition={{
          duration: 10,
          repeat: Number.POSITIVE_INFINITY,
          repeatType: "reverse",
        }}
      />

      <div className="container relative px-4 md:px-6">
        <motion.div style={{ opacity, scale, y }} className="mx-auto max-w-3xl text-center">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="inline-block rounded-full bg-gradient-to-r from-purple-600/10 to-violet-600/10 px-4 py-1.5 text-sm font-medium text-purple-300 backdrop-blur"
          >
            <span className="mr-2 inline-block h-2 w-2 animate-pulse rounded-full bg-purple-500"></span>
            Introducing Intervene for macOS
          </motion.div>

          <motion.h1
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.1 }}
            className="mt-6 text-4xl font-bold tracking-tight sm:text-5xl md:text-6xl lg:text-7xl"
          >
            <span className="block">Save</span>
            <span className="mt-1 block bg-gradient-to-r from-purple-400 via-violet-400 to-indigo-400 bg-clip-text text-transparent">
              3+ hours per week
            </span>
            <span className="mt-1 block">on repetitive tasks</span>
          </motion.h1>

          <motion.p
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
            className="mt-6 text-lg text-white/70 md:text-xl"
          >
            Intervene is an on-device autonomous desktop agent that takes over repetitive digital workflows â filling
            forms, renaming files, drafting emails, organizing tabs, and more.
          </motion.p>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.3 }}
            className="mt-8 flex flex-col items-center justify-center gap-4 sm:flex-row"
          >
            <Link
              href="#download"
              className="inline-flex h-12 items-center justify-center rounded-md bg-gradient-to-r from-purple-600 to-violet-600 px-8 text-sm font-medium text-white shadow-lg shadow-purple-900/20 transition-all hover:shadow-xl hover:shadow-purple-900/30 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-purple-500"
            >
              Download for macOS
              <ArrowRight className="ml-2 h-4 w-4" />
            </Link>
            <Link
              href="#how-it-works"
              className="inline-flex h-12 items-center justify-center rounded-md border border-white/10 bg-white/5 px-8 text-sm font-medium text-white backdrop-blur transition-colors hover:bg-white/10 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-white/20"
            >
              See how it works
            </Link>
          </motion.div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 40 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.7, delay: 0.4 }}
          style={{ y: useTransform(scrollYProgress, [0, 1], [0, 200]) }}
          className="relative mx-auto mt-16 aspect-video max-w-4xl overflow-hidden rounded-xl border border-white/10 bg-gradient-to-b from-white/5 to-white/0 shadow-2xl"
        >
          <div className="absolute inset-0 flex items-center justify-center">
            <div className="relative h-full w-full">
              <Image
                src="/placeholder.svg?height=1080&width=1920"
                alt="Intervene desktop app interface"
                width={1920}
                height={1080}
                className="h-full w-full object-cover"
              />

              {/* Animated cursor and UI elements overlay */}
              <div className="absolute inset-0">
                <motion.div
                  className="absolute"
                  initial={{ x: "30%", y: "40%" }}
                  animate={{
                    x: ["30%", "60%", "45%", "70%", "30%"],
                    y: ["40%", "30%", "60%", "50%", "40%"],
                  }}
                  transition={{
                    duration: 8,
                    repeat: Number.POSITIVE_INFINITY,
                    repeatType: "loop",
                  }}
                >
                  <MousePointerClick className="h-6 w-6 text-white drop-shadow-lg" />
                </motion.div>

                <motion.div
                  className="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 rounded-lg border border-white/20 bg-black/50 px-4 py-3 backdrop-blur-md"
                  initial={{ opacity: 0, scale: 0.9 }}
                  animate={{
                    opacity: [0, 1, 1, 0],
                    scale: [0.9, 1, 1, 0.9],
                  }}
                  transition={{
                    duration: 4,
                    delay: 2,
                    repeat: Number.POSITIVE_INFINITY,
                    repeatDelay: 4,
                  }}
                >
                  <div className="flex items-center gap-2">
                    <div className="h-3 w-3 rounded-full bg-green-500"></div>
                    <p className="text-sm font-medium text-white">Renaming 24 files based on spreadsheet data...</p>
                  </div>
                </motion.div>
              </div>
            </div>
          </div>
        </motion.div>
      </div>
    </div>
  )
}
</file>

<file path="components/mouse-effect.tsx">
"use client"

import { useEffect, useState } from "react"
import { motion, useSpring, useMotionValue } from "framer-motion"

export default function MouseEffect() {
  // Create motion values at the top level of the component
  const cursorX = useMotionValue(0)
  const cursorY = useMotionValue(0)
  
  // Create spring configs
  const springConfig = { damping: 25, stiffness: 300 }
  
  // Create springs at the top level
  const cursorXSpring = useSpring(cursorX, springConfig)
  const cursorYSpring = useSpring(cursorY, springConfig)
  
  // For the larger glow effect
  const glowX = useSpring(cursorX, { ...springConfig, damping: 40, stiffness: 100 })
  const glowY = useSpring(cursorY, { ...springConfig, damping: 40, stiffness: 100 })
  
  const [cursorVariant, setCursorVariant] = useState("default")
  const [isHovering, setIsHovering] = useState(false)
  
  // For the trail effect
  const trailElements = 5
  
  // Pre-create all motion values at component top level
  const trailMotionX = [
    useMotionValue(0),
    useMotionValue(0),
    useMotionValue(0),
    useMotionValue(0),
    useMotionValue(0)
  ]
  
  const trailMotionY = [
    useMotionValue(0),
    useMotionValue(0),
    useMotionValue(0),
    useMotionValue(0),
    useMotionValue(0)
  ]
  
  // Pre-create all springs at component top level
  const trailSpringsX = [
    useSpring(trailMotionX[0], { ...springConfig, stiffness: 300 - 0 * 40, damping: 20 + 0 * 5 }),
    useSpring(trailMotionX[1], { ...springConfig, stiffness: 300 - 1 * 40, damping: 20 + 1 * 5 }),
    useSpring(trailMotionX[2], { ...springConfig, stiffness: 300 - 2 * 40, damping: 20 + 2 * 5 }),
    useSpring(trailMotionX[3], { ...springConfig, stiffness: 300 - 3 * 40, damping: 20 + 3 * 5 }),
    useSpring(trailMotionX[4], { ...springConfig, stiffness: 300 - 4 * 40, damping: 20 + 4 * 5 })
  ]
  
  const trailSpringsY = [
    useSpring(trailMotionY[0], { ...springConfig, stiffness: 300 - 0 * 40, damping: 20 + 0 * 5 }),
    useSpring(trailMotionY[1], { ...springConfig, stiffness: 300 - 1 * 40, damping: 20 + 1 * 5 }),
    useSpring(trailMotionY[2], { ...springConfig, stiffness: 300 - 2 * 40, damping: 20 + 2 * 5 }),
    useSpring(trailMotionY[3], { ...springConfig, stiffness: 300 - 3 * 40, damping: 20 + 3 * 5 }),
    useSpring(trailMotionY[4], { ...springConfig, stiffness: 300 - 4 * 40, damping: 20 + 4 * 5 })
  ]
  
  useEffect(() => {
    const mouseMove = (e: MouseEvent) => {
      cursorX.set(e.clientX)
      cursorY.set(e.clientY)
      
      // Update trail positions with delay
      setTimeout(() => {
        for (let i = 0; i < trailElements; i++) {
          trailMotionX[i].set(e.clientX)
          trailMotionY[i].set(e.clientY)
        }
      }, 100) // Slight delay for trail effect
    }
    
    window.addEventListener("mousemove", mouseMove)
    
    return () => {
      window.removeEventListener("mousemove", mouseMove)
    }
  }, [cursorX, cursorY, trailMotionX, trailMotionY]) // Added missing dependencies
  
  useEffect(() => {
    const interactiveElements = document.querySelectorAll(
      "a, button, h1, h2, h3, h4, h5, h6, input, [role='button'], .interactive"
    )
    
    const mouseEnter = () => {
      setCursorVariant("hover")
      setIsHovering(true)
    }
    
    const mouseLeave = () => {
      setCursorVariant("default")
      setIsHovering(false)
    }
    
    interactiveElements.forEach((element) => {
      element.addEventListener("mouseenter", mouseEnter)
      element.addEventListener("mouseleave", mouseLeave)
    })
    
    return () => {
      interactiveElements.forEach((element) => {
        element.removeEventListener("mouseenter", mouseEnter)
        element.removeEventListener("mouseleave", mouseLeave)
      })
    }
  }, [])
  
  const variants = {
    default: {
      height: 32,
      width: 32,
      opacity: 0.5,
      mixBlendMode: "difference" as const,
    },
    hover: {
      height: 64,
      width: 64,
      opacity: 0.8,
      backgroundColor: "rgba(139, 92, 246, 0.3)",
      mixBlendMode: "screen" as const,
    },
  }
  
  return (
    <>
      {/* Main cursor */}
      <motion.div
        className="pointer-events-none fixed left-0 top-0 z-50 rounded-full bg-purple-500"
        style={{
          x: cursorXSpring,
          y: cursorYSpring,
          translateX: "-50%",
          translateY: "-50%",
        }}
        variants={variants}
        animate={cursorVariant}
        transition={{
          type: "spring",
          stiffness: 500,
          damping: 28,
          mass: 0.5,
        }}
      />
      
      {/* Cursor glow effect */}
      <motion.div
        className="pointer-events-none fixed left-0 top-0 z-40 h-40 w-40 rounded-full bg-gradient-radial from-purple-500/20 via-violet-500/10 to-transparent blur-xl"
        style={{
          x: glowX,
          y: glowY,
          translateX: "-50%",
          translateY: "-50%",
          opacity: isHovering ? 0.8 : 0.4,
          scale: isHovering ? 1.5 : 1,
        }}
        transition={{
          opacity: { duration: 0.2 },
          scale: { duration: 0.4 },
        }}
      />
      
      {/* Cursor trails */}
      {Array.from({ length: trailElements }).map((_, i) => (
        <motion.div
          key={i}
          className="pointer-events-none fixed left-0 top-0 z-30 h-2 w-2 rounded-full bg-purple-400"
          style={{
            x: trailSpringsX[i],
            y: trailSpringsY[i],
            translateX: "-50%",
            translateY: "-50%",
            opacity: 0.3 - i * 0.05,
            scale: 1 - i * 0.15,
          }}
          transition={{
            type: "spring",
            stiffness: 300 - i * 40,
            damping: 20 + i * 5,
            mass: 0.5 + i * 0.1,
            delay: i * 0.02,
          }}
        />
      ))}
      
      {/* Magnetic effect for buttons - applied via CSS */}
      <style jsx global>{`
        a, button, .magnetic {
          transition: transform 0.2s cubic-bezier(0.23, 1, 0.32, 1);
        }
        
        a:hover, button:hover, .magnetic:hover {
          transform: translateY(-2px);
        }
      `}</style>
    </>
  )
}
</file>

<file path="components/pricing-table.tsx">
"use client"

import { useRef } from "react"
import Link from "next/link"
import { motion, useInView } from "framer-motion"
import { Check } from "lucide-react"

const plans = [
  {
    name: "Personal",
    price: "$9",
    description: "Perfect for individual users",
    features: [
      "Autonomous desktop workflows",
      "Manual takeover system",
      "Basic efficiency reporting",
      "Single device license",
      "Community support",
    ],
    cta: "Get Started",
    popular: false,
  },
  {
    name: "Pro",
    price: "$19",
    description: "For power users and freelancers",
    features: [
      "Everything in Personal",
      "Advanced workflow creation",
      "Custom triggers and actions",
      "Up to 3 device licenses",
      "Priority support",
      "Workflow templates library",
    ],
    cta: "Get Started",
    popular: true,
  },
  {
    name: "Team",
    price: "$49",
    description: "For small teams and businesses",
    features: [
      "Everything in Pro",
      "Team workflow sharing",
      "Admin dashboard",
      "Team efficiency analytics",
      "Up to 10 device licenses",
      "Dedicated support",
      "Custom integration options",
    ],
    cta: "Contact Sales",
    popular: false,
  },
]

export default function PricingTable() {
  const ref = useRef<HTMLDivElement>(null)
  const isInView = useInView(ref, { once: true, amount: 0.2 })

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
      },
    },
  }

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.5,
      },
    },
  }

  return (
    <section id="pricing" className="relative py-20 md:py-32">
      <div className="absolute inset-0 bg-gradient-to-b from-black via-purple-950/10 to-black" />

      <div className="container relative px-4 md:px-6">
        <div className="mx-auto max-w-3xl text-center">
          <h2 className="text-3xl font-bold tracking-tight sm:text-4xl md:text-5xl">
            Simple, transparent{" "}
            <span className="bg-gradient-to-r from-purple-400 to-violet-400 bg-clip-text text-transparent">
              pricing
            </span>
          </h2>
          <p className="mt-4 text-lg text-white/70">Choose the plan that&apos;s right for you or your team</p>
        </div>

        <div ref={ref} className="mt-16">
          <motion.div
            variants={containerVariants}
            initial="hidden"
            animate={isInView ? "visible" : "hidden"}
            className="grid gap-8 md:grid-cols-3"
          >
            {plans.map((plan, index) => (
              <motion.div
                key={index}
                variants={itemVariants}
                className={`relative overflow-hidden rounded-xl border ${
                  plan.popular
                    ? "border-purple-500 bg-gradient-to-b from-purple-900/20 to-black"
                    : "border-white/10 bg-white/5"
                } p-8 backdrop-blur-sm transition-all hover:shadow-lg hover:shadow-purple-500/5`}
              >
                {plan.popular && (
                  <div className="absolute right-0 top-0 rounded-bl-lg bg-gradient-to-r from-purple-600 to-violet-600 px-4 py-1 text-xs font-medium">
                    Most Popular
                  </div>
                )}
                <h3 className="text-xl font-bold">{plan.name}</h3>
                <div className="mt-4 flex items-baseline">
                  <span className="text-4xl font-bold">{plan.price}</span>
                  <span className="ml-1 text-white/70">/month</span>
                </div>
                <p className="mt-2 text-sm text-white/70">{plan.description}</p>

                <ul className="mt-6 space-y-3">
                  {plan.features.map((feature, i) => (
                    <li key={i} className="flex items-center gap-2">
                      <Check className="h-4 w-4 text-purple-500" />
                      <span className="text-sm">{feature}</span>
                    </li>
                  ))}
                </ul>

                <div className="mt-8">
                  <Link
                    href="#download"
                    className={`inline-flex h-10 w-full items-center justify-center rounded-md ${
                      plan.popular
                        ? "bg-gradient-to-r from-purple-600 to-violet-600 text-white"
                        : "border border-white/10 bg-white/5 text-white hover:bg-white/10"
                    } px-4 text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-purple-500`}
                  >
                    {plan.cta}
                  </Link>
                </div>
              </motion.div>
            ))}
          </motion.div>

          <div className="mt-12 text-center">
            <p className="text-white/70">All plans include a 14-day free trial. No credit card required.</p>
          </div>
        </div>
      </div>
    </section>
  )
}
</file>

<file path="components/testimonials-section.tsx">
"use client"

import { useRef } from "react"
import Image from "next/image"
import { motion, useInView } from "framer-motion"
import { Star } from "lucide-react"

const testimonials = [
  {
    quote:
      "Intervene has completely transformed how I manage my daily tasks. I'm saving at least 2 hours every day on repetitive work.",
    author: "Alex Johnson",
    role: "Product Manager at Acme Inc.",
    avatar: "/placeholder.svg?height=100&width=100",
  },
  {
    quote:
      "The ability to automate file renaming and organization based on spreadsheet data has been a game-changer for our team.",
    author: "Sarah Chen",
    role: "Operations Director at TechFlow",
    avatar: "/placeholder.svg?height=100&width=100",
  },
  {
    quote:
      "I was skeptical about AI desktop automation, but Intervene's manual takeover feature makes it feel safe and controllable.",
    author: "Michael Rodriguez",
    role: "Senior Developer at BuildCorp",
    avatar: "/placeholder.svg?height=100&width=100",
  },
  {
    quote: "Our team's productivity has increased by 30% since implementing Intervene across our design department.",
    author: "Emma Wilson",
    role: "Creative Director at DesignHub",
    avatar: "/placeholder.svg?height=100&width=100",
  },
]

export default function TestimonialsSection() {
  const ref = useRef<HTMLDivElement>(null)
  const isInView = useInView(ref, { once: true, amount: 0.2 })

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
      },
    },
  }

  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.5,
      },
    },
  }

  return (
    <section id="testimonials" className="relative py-20 md:py-32">
      <div className="absolute inset-0 bg-gradient-to-b from-black via-purple-950/10 to-black" />

      <div className="container relative px-4 md:px-6">
        <div className="mx-auto max-w-3xl text-center">
          <h2 className="text-3xl font-bold tracking-tight sm:text-4xl md:text-5xl">
            Loved by{" "}
            <span className="bg-gradient-to-r from-purple-400 to-violet-400 bg-clip-text text-transparent">
              productive teams
            </span>
          </h2>
          <p className="mt-4 text-lg text-white/70">
            See what our users are saying about how Intervene has transformed their workflow
          </p>
        </div>

        <div ref={ref} className="mt-16">
          <motion.div
            variants={containerVariants}
            initial="hidden"
            animate={isInView ? "visible" : "hidden"}
            className="grid gap-8 md:grid-cols-2 lg:grid-cols-4"
          >
            {testimonials.map((testimonial, index) => (
              <motion.div
                key={index}
                variants={itemVariants}
                className="group relative overflow-hidden rounded-xl border border-white/10 bg-white/5 p-6 backdrop-blur-sm transition-all hover:bg-white/10 hover:shadow-lg hover:shadow-purple-500/5"
              >
                <div className="mb-4 flex">
                  {[...Array(5)].map((_, i) => (
                    <Star key={i} className="h-4 w-4 fill-purple-500 text-purple-500" />
                  ))}
                </div>
                <p className="mb-4 text-white/90">&quot;{testimonial.quote}&quot;</p>
                <div className="flex items-center gap-3">
                  <Image
                    src={testimonial.avatar || "/placeholder.svg"}
                    alt={testimonial.author}
                    width={40}
                    height={40}
                    className="rounded-full"
                  />
                  <div>
                    <h4 className="font-medium">{testimonial.author}</h4>
                    <p className="text-sm text-white/70">{testimonial.role}</p>
                  </div>
                </div>
                <div className="absolute bottom-0 left-0 h-1 w-0 bg-gradient-to-r from-purple-500 to-violet-500 transition-all duration-300 group-hover:w-full"></div>
              </motion.div>
            ))}
          </motion.div>
        </div>
      </div>
    </section>
  )
}
</file>

<file path="components/use-cases-section.tsx">
"use client"

import { useEffect, useRef } from "react"
import Image from "next/image"
import { motion } from "framer-motion"
import { FileText, FolderOpen, Mail, LayoutGrid, MousePointerClick } from "lucide-react"
import gsap from "gsap"
import { ScrollTrigger } from "gsap/ScrollTrigger"

// Register ScrollTrigger plugin
if (typeof window !== "undefined") {
  gsap.registerPlugin(ScrollTrigger)
}

const useCases = [
  {
    id: "form-filling",
    title: "Form Filling",
    description: "Automatically fill forms with data from various sources.",
    icon: FileText,
    color: "from-violet-500/20 to-purple-500/20",
    textColor: "text-violet-400",
    image: "/placeholder.svg?height=600&width=800",
    position: "right",
  },
  {
    id: "file-organization",
    title: "File Organization",
    description: "Rename, sort, and organize files based on content or metadata.",
    icon: FolderOpen,
    color: "from-pink-500/20 to-rose-500/20",
    textColor: "text-pink-400",
    image: "/placeholder.svg?height=600&width=800",
    position: "left",
  },
  {
    id: "email-management",
    title: "Email Management",
    description: "Draft responses, categorize emails, and manage your inbox.",
    icon: Mail,
    color: "from-cyan-500/20 to-blue-500/20",
    textColor: "text-cyan-400",
    image: "/placeholder.svg?height=600&width=800",
    position: "right",
  },
  {
    id: "tab-organization",
    title: "Tab Organization",
    description: "Group and organize browser tabs based on projects or topics.",
    icon: LayoutGrid,
    color: "from-orange-500/20 to-amber-500/20",
    textColor: "text-orange-400",
    image: "/placeholder.svg?height=600&width=800",
    position: "left",
  },
]

export default function UseCasesSection() {
  const sectionRef = useRef<HTMLDivElement>(null)
  const useCaseRefs = useRef<(HTMLDivElement | null)[]>([])

  useEffect(() => {
    // Skip GSAP initialization during SSR
    if (typeof window === "undefined") return

    const ctx = gsap.context(() => {
      // Create a timeline for each use case
      useCaseRefs.current.forEach((useCase, index) => {
        if (!useCase) return

        // Create a timeline for this use case
        const tl = gsap.timeline({
          scrollTrigger: {
            trigger: useCase,
            start: "top 80%",
            end: "bottom 20%",
            toggleActions: "play none none reverse",
            // markers: true, // For debugging
          },
        })

        // Get the elements within this use case
        const content = useCase.querySelector(".content")
        const image = useCase.querySelector(".image")
        const icon = useCase.querySelector(".icon")
        const title = useCase.querySelector(".title")
        const description = useCase.querySelector(".description")
        const highlight = useCase.querySelector(".highlight")

        // Animate based on position (left or right)
        const isRight = useCases[index].position === "right"

        // Initial state
        gsap.set(content, { opacity: 0, x: isRight ? 50 : -50 })
        gsap.set(image, { opacity: 0, x: isRight ? -50 : 50 })
        gsap.set(icon, { opacity: 0, scale: 0.5 })
        gsap.set(title, { opacity: 0, y: 20 })
        gsap.set(description, { opacity: 0, y: 20 })
        gsap.set(highlight, { width: 0 })

        // Animation sequence
        tl.to(content, { opacity: 1, x: 0, duration: 0.6, ease: "power2.out" })
          .to(image, { opacity: 1, x: 0, duration: 0.6, ease: "power2.out" }, "-=0.4")
          .to(icon, { opacity: 1, scale: 1, duration: 0.4, ease: "back.out(1.7)" }, "-=0.4")
          .to(title, { opacity: 1, y: 0, duration: 0.4, ease: "power2.out" }, "-=0.3")
          .to(description, { opacity: 1, y: 0, duration: 0.4, ease: "power2.out" }, "-=0.2")
          .to(highlight, { width: "100%", duration: 0.6, ease: "power2.inOut" }, "-=0.2")
      })

      // Parallax effect for the floating elements
      const floatingElements = document.querySelectorAll(".floating-element")
      floatingElements.forEach((element) => {
        gsap.to(element, {
          y: "random(-100, 100)",
          scrollTrigger: {
            trigger: sectionRef.current,
            start: "top bottom",
            end: "bottom top",
            scrub: 1,
          },
        })
      })
    }, sectionRef)

    return () => ctx.revert() // Cleanup
  }, [])

  return (
    <section ref={sectionRef} id="use-cases" className="relative py-20 md:py-32 overflow-hidden">
      <div className="absolute inset-0 bg-gradient-to-b from-black via-purple-950/10 to-black" />

      {/* Floating elements */}
      <div className="floating-element absolute top-1/4 left-1/4 h-40 w-40 rounded-full bg-gradient-to-r from-purple-600/20 to-violet-600/20 blur-3xl" />
      <div className="floating-element absolute bottom-1/3 right-1/3 h-60 w-60 rounded-full bg-gradient-to-r from-blue-600/20 to-cyan-600/20 blur-3xl" />
      <div className="floating-element absolute top-2/3 right-1/4 h-32 w-32 rounded-full bg-gradient-to-r from-pink-600/20 to-rose-600/20 blur-3xl" />

      <div className="container relative px-4 md:px-6">
        <div className="mx-auto max-w-3xl text-center mb-20">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            viewport={{ once: true }}
            className="inline-block rounded-full bg-gradient-to-r from-purple-600/10 to-violet-600/10 px-4 py-1.5 text-sm font-medium text-purple-300 backdrop-blur"
          >
            <span className="mr-2 inline-block h-2 w-2 animate-pulse rounded-full bg-purple-500"></span>
            Powerful Automation
          </motion.div>

          <motion.h2
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.1 }}
            viewport={{ once: true }}
            className="mt-6 text-3xl font-bold tracking-tight sm:text-4xl md:text-5xl"
          >
            Fly through your{" "}
            <span className="bg-gradient-to-r from-purple-400 to-violet-400 bg-clip-text text-transparent">
              workflows
            </span>{" "}
            twice as fast
          </motion.h2>
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.2 }}
            viewport={{ once: true }}
            className="mt-4 text-lg text-white/70"
          >
            Be more responsive to what matters most. Collaborate faster than ever before.
          </motion.p>
        </div>

        <div className="space-y-32 md:space-y-64">
          {useCases.map((useCase, index) => (
            <div
              key={useCase.id}
              ref={(el) => { useCaseRefs.current[index] = el; }}
              className={`relative flex flex-col ${
                useCase.position === "right" ? "md:flex-row" : "md:flex-row-reverse"
              } items-center gap-8 md:gap-12`}
            >
              <div className="content w-full md:w-1/2 space-y-6">
                <div
                  className={`icon relative inline-flex h-16 w-16 items-center justify-center rounded-lg bg-gradient-to-br ${useCase.color} backdrop-blur-md`}
                >
                  <useCase.icon className={`h-8 w-8 ${useCase.textColor}`} />
                </div>

                <h3 className={`title text-2xl md:text-3xl font-bold ${useCase.textColor}`}>{useCase.title}</h3>
                <p className="description text-lg text-white/70">{useCase.description}</p>

                <div className="relative">
                  <div className="highlight absolute bottom-0 left-0 h-1 w-0 bg-gradient-to-r from-purple-500 to-violet-500"></div>
                </div>

                {/* Animated UI elements specific to each use case */}
                {useCase.id === "form-filling" && (
                  <div className="mt-10 flex items-center gap-4">
                    <div className="h-10 w-10 rounded-full bg-white/10 flex items-center justify-center">
                      <MousePointerClick className="h-5 w-5 text-white/70" />
                    </div>
                    <div className="text-sm text-white/70">
                      <span className="font-medium text-white">Auto-fill detected</span> - 12 fields completed
                    </div>
                  </div>
                )}

                {useCase.id === "file-organization" && (
                  <div className="mt-10 flex items-center gap-4">
                    <div className="h-10 w-10 rounded-full bg-white/10 flex items-center justify-center">
                      <FolderOpen className="h-5 w-5 text-white/70" />
                    </div>
                    <div className="text-sm text-white/70">
                      <span className="font-medium text-white">24 files renamed</span> - based on spreadsheet data
                    </div>
                  </div>
                )}

                {useCase.id === "email-management" && (
                  <div className="mt-10 flex items-center gap-4">
                    <div className="h-10 w-10 rounded-full bg-white/10 flex items-center justify-center">
                      <Mail className="h-5 w-5 text-white/70" />
                    </div>
                    <div className="text-sm text-white/70">
                      <span className="font-medium text-white">Response drafted</span> - ready for your review
                    </div>
                  </div>
                )}

                {useCase.id === "tab-organization" && (
                  <div className="mt-10 flex items-center gap-4">
                    <div className="h-10 w-10 rounded-full bg-white/10 flex items-center justify-center">
                      <LayoutGrid className="h-5 w-5 text-white/70" />
                    </div>
                    <div className="text-sm text-white/70">
                      <span className="font-medium text-white">Tabs grouped</span> - by project and relevance
                    </div>
                  </div>
                )}
              </div>

              <div className="image w-full md:w-1/2">
                <div className="relative aspect-video overflow-hidden rounded-xl border border-white/10 bg-black/40 shadow-2xl">
                  <Image
                    src={useCase.image || "/placeholder.svg"}
                    alt={useCase.title}
                    width={800}
                    height={600}
                    className="h-full w-full object-cover"
                  />

                  {/* Animated UI elements overlay */}
                  <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent">
                    {useCase.id === "form-filling" && (
                      <div className="absolute bottom-4 left-4 right-4 rounded-lg border border-white/20 bg-black/50 p-3 backdrop-blur-sm">
                        <div className="flex items-center gap-2">
                          <div className="h-3 w-3 rounded-full bg-green-500"></div>
                          <p className="text-sm font-medium text-white">Form auto-fill complete</p>
                        </div>
                      </div>
                    )}

                    {useCase.id === "file-organization" && (
                      <div className="absolute bottom-4 left-4 right-4 rounded-lg border border-white/20 bg-black/50 p-3 backdrop-blur-sm">
                        <div className="flex items-center gap-2">
                          <div className="h-3 w-3 rounded-full bg-green-500"></div>
                          <p className="text-sm font-medium text-white">Files organized by project</p>
                        </div>
                      </div>
                    )}

                    {useCase.id === "email-management" && (
                      <div className="absolute bottom-4 left-4 right-4 rounded-lg border border-white/20 bg-black/50 p-3 backdrop-blur-sm">
                        <div className="flex items-center gap-2">
                          <div className="h-3 w-3 rounded-full bg-green-500"></div>
                          <p className="text-sm font-medium text-white">Email response generated</p>
                        </div>
                      </div>
                    )}

                    {useCase.id === "tab-organization" && (
                      <div className="absolute bottom-4 left-4 right-4 rounded-lg border border-white/20 bg-black/50 p-3 backdrop-blur-sm">
                        <div className="flex items-center gap-2">
                          <div className="h-3 w-3 rounded-full bg-green-500"></div>
                          <p className="text-sm font-medium text-white">Tabs grouped by project</p>
                        </div>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Floating UI elements */}
        {/* <div className="pointer-events-none absolute top-1/3 left-10 h-20 w-20 rounded-full border border-white/10 bg-white/5 backdrop-blur-md">
          <div className="absolute inset-0 flex items-center justify-center">
            <Search className="h-8 w-8 text-white/50" />
          </div>
        </div>

        <div className="pointer-events-none absolute bottom-1/4 right-10 h-20 w-20 rounded-full border border-white/10 bg-white/5 backdrop-blur-md">
          <div className="absolute inset-0 flex items-center justify-center">
            <Lightbulb className="h-8 w-8 text-white/50" />
          </div>
        </div> */}
      </div>
    </section>
  )
}
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;
</file>

<file path="package.json">
{
  "name": "landing_page",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@vercel/analytics": "^1.5.0",
    "framer-motion": "^12.7.3",
    "gsap": "^3.12.7",
    "lucide-react": "^0.488.0",
    "next": "15.3.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "repomix": "^0.3.1"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.3.0",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

</files>
